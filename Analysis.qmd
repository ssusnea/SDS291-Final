---
title: "Analysis"
format: pdf
---

the first steps for the data analysis
```{r, include = FALSE}
# loading packages
library(tidyverse)
library(stargazer)
library(car)
```


```{r, include = FALSE}
# reading the csv:
RegentsExams <- read.csv("regents_scores.csv")
SchoolQualityReport <- read.csv("2017_2018_SchoolQualityReport.csv")


# selecting the relevant variables from this data set.
SchoolQuality_Selected <- SchoolQualityReport |> 
  select(DBN, School.Name, Percent.of.teachers.with.3.or.more.years.of.experience, Percent.of.Students.Chronically.Absent, Rigorous.Instruction...Percent.Positive, Supportive.Environment.Rating)

# changing one column name to make it easier to left join later
colnames(SchoolQuality_Selected)[1] <- c("School.DBN")

# filtering the RegentsExams data set 
RegentsEdited <- RegentsExams |> 
  select(2:10) |>
  filter(School.Level == "High school", Year == "2018", School.Type == "General Academic")

# filtering for only the two tests we are interested in
RegentsEdited <- RegentsEdited |> 
  filter(Regents.Exam == "Common Core Algebra2" | Regents.Exam == "Common Core English")


# creating two new rows, one for the english scores one for the math scores
RegentsEdited <- RegentsEdited |> 
  pivot_wider(names_from = Regents.Exam,
              values_from = Mean.Score)

# changing the names to work for programming: 
colnames(RegentsEdited)[8:9] <- c("Mean.Algebra2", "Mean.English")
  
# this worked but the problem now is that there are alternating NA values for the two columns on test scores because some of those became the math scores. so we need to remove the NA values in math and English while keeping the schools. BASICALLY instead of there being one school twice (two rows) we need there to be one row for each school.

# creating a data frame that only contains Algebra2 observations

Algebra2 <- RegentsEdited |> 
  select(!9) |>
  filter(Mean.Algebra2 != "s" & !is.na(Mean.Algebra2))

English <- RegentsEdited |> 
  select(School.DBN, Mean.English) |>
  filter(Mean.English != "s" & !is.na(Mean.English))

# there are fewer observations for algebra 2 than there are for English, so I want to left join on algebra 2 to keep all of those observations

FinalRegents <- left_join(x = Algebra2, y = English, by = "School.DBN")
# now I have a working data frame for the exam scores. 

# next step is to transform this into our final working project by joining this data frame with the first data frame

# selecting only the minimum columns we are interested in
Scores <- FinalRegents |> 
  select(School.DBN, Mean.Algebra2, Mean.English)

# left joining by School.DBN to get the ultimate real final data frame we want to work with: 

FinalData <- left_join(x = Scores, y = SchoolQuality_Selected, by = "School.DBN")

# The test score columns were character vectors so we needed to coerce them to numeric vectors.
FinalData$Mean.Algebra2 <- as.numeric(FinalData$Mean.Algebra2)
FinalData$Mean.English <- as.numeric(FinalData$Mean.English)

# need to re-code the column names 
names <- names(FinalData)
snake <- snakecase::to_snake_case(names)
colnames(FinalData) <- snake

renamed <- c("school_dbn", "mean_algebra2", "mean_english", "school_name", "teacher_experience", "chronically_absent", "rigorous_instruction", "supportive_environment")
colnames(FinalData) <- renamed
```


### inital investigation: 
```{r}
lm_english <- lm(mean_english ~ teacher_experience + chronically_absent + rigorous_instruction + supportive_environment, data = FinalData)

summary(lm_english)
```

```{r}
lm_math <- lm(mean_algebra2 ~ teacher_experience + chronically_absent + rigorous_instruction + supportive_environment, data = FinalData)

summary(lm_math)
```

### checking conditions: 
```{r}
plot(lm_english, which = 1)
plot(lm_english, which = 2)
vif(lm_english)
```

```{r}
plot(lm_math, which = 1)
plot(lm_math, which = 2)
vif(lm_math)

cor(FinalData[,2:3])
```

## checking individual variables: 
```{r}
ggplot(data = FinalData, aes(x = teacher_experience)) + geom_histogram() +ggtitle("teacher experience")

ggplot(data = FinalData, aes(x = log(teacher_experience))) + geom_histogram() +ggtitle("teacher experience logged")

ggplot(data = FinalData, aes(x = chronically_absent)) + geom_histogram() +ggtitle("chronically absent")

ggplot(data = FinalData, aes(x = log(chronically_absent))) + geom_histogram() +ggtitle("chronically absent logged")

# why is log transforming making all of these so skewed? 

ggplot(data = FinalData, aes(x = chronically_absent, y = mean_english)) + geom_point() + geom_smooth()
ggplot(data = FinalData, aes(x = teacher_experience, y = mean_english)) + geom_point() + geom_smooth()
ggplot(data = FinalData, aes(x = rigorous_instruction, y = mean_english)) + geom_point() + geom_smooth()
```
general note we probably have an omitted variable in this model and that might be why r is attributing so much of the variation to the attendance var. 

all of the condition check stuff goes in the appendix just like the case study 

data and methods: 
key var, model approach, present model, interpret,

finally draw conclusions 


FORMATTED REGRESSION TABLE AND some presentation of model, could use predict() to construct fake data set. 

predicted interval plot can be used for other types of regression!!! not just logistics. with prediction intervals. 

don't need to interpret the intercept, just focus on the estimates. 

the appendix is the massive chunk with comments included. 

set it to eval = FALSE that chunk
